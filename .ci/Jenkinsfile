pipeline {
    agent any
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }

    stages {

        stage('assert parameters') {
            when {
                anyOf {
                    expression { env.TEST_NAME == null }
                }
            }
            steps {
                error('Please select an operator using the environment variable TEST_NAME')
            }
        }

        stage('prepare environment on Jenkins worker') {
            steps {
                script {
                    env.HOST_WORKSPACE = sh(script: 'echo ${WORKSPACE} | sed \'s~jenkins_home~jenkins/data~\'', returnStdout: true).trim()
                    env.JENKINS_USER_GROUP = sh(script: 'echo "$(id -u):$(id -g)"', returnStdout: true).trim()
                }
                script {
                    sh """
                        echo \"The Jenkins workspace folder as seen from the Docker daemon: '${env.HOST_WORKSPACE}'\"
                        echo \"The Docker user parameter value for T2 testdriver: '${env.JENKINS_USER_GROUP}'\"
                        docker pull docker.stackable.tech/ci-preprocessor:latest
                        docker pull docker.stackable.tech/t2-testdriver:latest
                        mkdir -p .ci/tests/
                    """
                }
            }
        }

        stage('generate test files') {
            steps {
                sh """
                    docker run \
                        --volume ${env.HOST_WORKSPACE}/.ci/tests/:/target/ \
                        --volume ${env.HOST_WORKSPACE}/.ci/tests.yaml:/tests.yaml \
                        --volume ${env.HOST_WORKSPACE}/.ci/platforms.yaml:/platforms.yaml \
                        --user ${env.JENKINS_USER_GROUP} \
                        --env TEST_NAME=${env.TEST_NAME} \
                        docker.stackable.tech/ci-preprocessor:latest
                    mkdir -p .ci/tests/${env.TEST_NAME}/target
                """
            }
        }

        stage('simulate test') {
            steps {
                script {
                    env.TEST_RETURN_CODE = sh (script: """
                        docker pull docker.stackable.tech/t2-testdriver:dummy
                        set +e
                        docker run \
                            --env FAIL_TERMINATE=TRUE \
                            docker.stackable.tech/t2-testdriver:dummy
                    """, returnStatus: true)
                    sh """
                        echo ${env.TEST_RETURN_CODE}
                        docker hurz
                        echo "nach docker hurz"
                    """
                }
            }
        }

        stage('archive artifacts') {
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: ".ci/tests/${env.TEST_NAME}/target/**", defaultExcludes: false, followSymlinks: false
            }
        }

        stage('cleanup') {
            steps {
                cleanWs()
            }
        }

//        stage('run test using T2 Testdriver') {
//            steps {
//                withCredentials([string(credentialsId: 'T2_TOKEN', variable: 'T2_TOKEN')]) {
//                    sh """
//                        docker run \
//                            --volume ${env.HOST_WORKSPACE}/.ci/tests/${env.TEST_NAME}/target/:/target/ \
//                            --volume ${env.HOST_WORKSPACE}/.ci/tests/${env.TEST_NAME}/cluster.yaml:/cluster.yaml \
//                            --volume ${env.HOST_WORKSPACE}/.ci/tests/${env.TEST_NAME}/test.sh:/test.sh \
//                            --env T2_TOKEN=$T2_TOKEN \
//                            --env T2_URL=https://t2.stackable.tech \
//                            --env UID_GID=${env.JENKINS_USER_GROUP} \
//                            docker.stackable.tech/t2-testdriver    
//                    """
//                }
//            }
//        }

    }
}


