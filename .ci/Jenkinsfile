pipeline {
    agent any
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }

    stages {

        stage('check parameters') {
            when {
                anyOf {
                    expression { env.TEST_NAME == null }
                }
            }
            steps {
                error('Please select an operator using the environment variable TEST_NAME')
            }
        }

        stage('prepare test run') {
            steps {
                script {
                    hostWorkspace = sh(script: 'echo hurz', returnStdout: true)
                    env.KRAM = hostWorkspace
                    sh """
                        echo KRAM: ${env.KRAM}
                    """
                }
            }
        }

        stage('dummy test run') {
            steps {
                sh """
                    echo neue stufe: ${env.KRAM}
                """
            }
        }

        // stage('print parameters') {
        //     when {
        //         allOf {
        //             expression { env.STACKABLE_OPERATOR != null }
        //         }
        //     }
        //     steps {
        //         echo "Testing the operator: ${env.STACKABLE_OPERATOR}"
        //     }
        // }

        // stage('print folder content') {
        //     steps {
        //         sh """
        //             cd .ci/
        //             rm -rf target/ || true
        //             mkdir target/
        //             docker run \
        //                 docker.stackable.tech/ci-preprocessor:latest
        //         """
        //     }
        // }

    }
}


